" Initialization.
set nocompatible
lang en_US.UTF-8
set encoding=utf-8
set timeoutlen=200
set ttimeoutlen=0
filetype on
filetype plugin on
filetype indent on

" Recursive maps to normalize Option + Left/Right/Delete and other keycodes.
" These friendly names are referenced by future bindings.
map  <Esc><BS> <M-BS>
map! <Esc><BS> <M-BS>
map  <Char-23> <M-BS>
map! <Char-23> <M-BS>
map  <Esc>[H <Home>
map! <Esc>[H <Home>
map  <Esc>[F <End>
map! <Esc>[F <End>
map  <Esc>b <M-b>
map! <Esc>b <M-b>
map  <Esc>f <M-f>
map! <Esc>f <M-f>

" Repeat last normal mode command.
nmap <CR> @:

" Select buffer-on-left and buffer-on-right.
noremap  <silent> <C-Left> :bprevious<CR>
noremap! <silent> <C-Left> <C-o>:bprevious<CR>
noremap  <silent> <C-Right> :bnext<CR>
noremap! <silent> <C-Right> <C-o>:bnext<CR>
noremap  <silent> <C-x> :bdelete<CR>
noremap! <silent> <C-x> <C-o>:bdelete<CR>
noremap  <C-Down> :badd ./
noremap! <C-Down> <C-o>:badd ./

" Option + Left/Right/Delete.
noremap  <M-BS> db
noremap! <M-BS> <C-w>
noremap  <M-b> <S-Left>
noremap! <M-b> <S-Left>
noremap  <M-f> <S-Right>
noremap! <M-f> <S-Right>
" Command + Delete:
noremap <C-u> d^
" noremap Option + Up (\e[1;9A) and Option + Down (\e[1;9B):
noremap <ESC>[1;9A gUiw
noremap <ESC>[1;9B guiw
" Same thing under alternate screen:
noremap <ESC>[1;3A gUiw
noremap <ESC>[1;3B guiw
" Un/indent selected text.
vnoremap <Tab> >gv
vnoremap <S-Tab> <gv

let s:ellipsis = expand("~/.../self")
let s:e_cache = s:ellipsis . "/var/cache/vim"
let s:e_home = s:ellipsis . "/data/profile/vim"
let s:e_plugins = s:e_home . "/plugged"

let &runtimepath = s:e_home . "," . $VIMRUNTIME
let netrw_home = s:e_cache

" disable vim-go `gd` short cut; handled by coc.vim
let g:go_def_mapping_enabled = 0
let g:go_fmt_command = "goimports"
let g:go_fmt_options = {'goimports': '-local go.zr.org'}

let g:polyglot_disabled = ['jenkins']

" Specify a directory for plugins
call plug#begin(s:e_plugins)
Plug 'lifepillar/vim-solarized8'
Plug 'vito-c/jq.vim'
Plug 'sirtaj/vim-openscad'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'sheerun/vim-polyglot'
Plug 'edkolev/promptline.vim'
Plug 'edkolev/tmuxline.vim'
Plug 'lepture/vim-jinja'
Plug 'ambv/black'
Plug 'fatih/vim-go'
Plug 'neoclide/coc.nvim', {'do': 'yarn install --frozen-lockfile'}
Plug 'hashivim/vim-terraform'
Plug 'junegunn/fzf', { 'do': './install --bin' }
call plug#end()
if empty(globpath(s:e_plugins, '*'))
  " Install plugins on first load.
  autocmd VimEnter * PlugInstall --sync | source ~/.vimrc
endif

let $GOFLAGS = "-mod=readonly"

set clipboard=unnamed

" Sets how many lines of history VIM has to remember
set history=10000

" Set to auto read when a file is changed from the outside
set autoread

" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = ","

" Exit insert mode
imap jj <Esc>

" Fast saving
nmap <leader>w :w!<cr>

" Fast editing of the .vimrc
map <leader>e :e! ~/.vimrc<cr>

" Remove search highlights.
map <silent> <leader><cr> :let @/ = ''<cr>

" When vimrc is edited, reload it
"autocmd! bufwritepost .vimrc source ~/.vimrc


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => VIM user interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set noshowmode
set scrolloff=6

set ruler                           " Always show current position

set cmdheight=1                     " The commandbar height

set backspace=eol,start,indent      " Set backspace config
"set whichwrap+=<,>,h,l
set whichwrap+=h,l

set ignorecase                      " Ignore case when searching
set smartcase

set hlsearch                        " Highlight search things

set incsearch       " Make search act like search in modern browsers
set nolazyredraw      " Don't redraw while executing macros

set magic           " Set magic on, for regular expressions

set showmatch       " Show matching bracets when text indicator is over them
set mat=2           " How many tenths of a second to blink

set noerrorbells    " No sound on errors
set novisualbell
set t_vb=

set nonu              " I *did* love me some line numbers

set cursorline

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vim COC
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" if hidden is not set, TextEdit might fail.
set hidden

" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
"set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" Or use `complete_info` if your vim support it, like:
" inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
"autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Create mappings for function text object, requires document symbols feature of languageserver.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <TAB> for select selections ranges, needs server support, like: coc-tsserver, coc-python
nmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <TAB> <Plug>(coc-range-select)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add status line support, for integration with other plugin, checkout `:h coc-status`
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Using CocList
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Colors and Fonts
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
syntax enable " Enable syntax highlighting

" Set font according to system
set gfn=Monospace\ 10
set shell=/bin/bash

set background=dark
if has('termguicolors') && ($COLORTERM == 'truecolor' || &t_Co > 256)
  set termguicolors
  " Direct color in classic vim.
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set guicursor=n-v-c-sm:block,i-ci-ve:ver25,r-cr-o:hor20
  "hi! link ICursor Constant
else
  " Fallback to reduced palette.
  let solarized_use16 = 1
endif
let solarized_termtrans = 1
silent! colorscheme solarized8
hi! IncSearch ctermfg=3 ctermbg=NONE cterm=reverse guifg=#d33682 guibg=NONE gui=reverse
hi! Search ctermfg=5 ctermbg=NONE cterm=reverse guifg=#6c71c4 guibg=NONE gui=reverse
hi clear CursorLine

set ffs=unix,dos,mac "Default file types

if exists("&colorcolumn")
    set colorcolumn=131
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Files, backups and undo
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Turn backup off, since most stuff is in SVN, git anyway...
set nobackup
set nowritebackup
set nowb
set noswapfile

"Persistent undo
try
    set undodir=~/.../self/var/cache/vim/undo
    set undofile
catch
endtry


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set tabstop=2 shiftwidth=2 softtabstop=0 expandtab smarttab

" Erlang
autocmd BufEnter *.erl :set tabstop=2 shiftwidth=2
autocmd BufEnter *.hrl :set tabstop=2 shiftwidth=2
autocmd BufEnter sys.config :set tabstop=2 shiftwidth=2 filetype=erlang
autocmd BufEnter rebar.config :set tabstop=2 shiftwidth=2 filetype=erlang

set lbr
"set textwidth=110

set ai "Auto indent
set si "Smart indet
set wrap "Wrap lines

autocmd BufEnter *.go :set noexpandtab
autocmd BufEnter wscript :set noexpandtab filetype=python
autocmd BufEnter *.djhtml :set filetype=htmldjango
autocmd BufEnter */git*config :set filetype=gitconfig
autocmd BufEnter */tmux*conf :set filetype=tmux
autocmd BufEnter */zr*.page :set filetype=markdown
autocmd FileType markdown :setlocal spell

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Moving around, tabs and buffers
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Return to last edit position (You want this!) *N*
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif

"Remeber open buffers on close
set viminfo=%,'100,s1024,h

""""""""""""""""""""""""""""""
" => Statusline
""""""""""""""""""""""""""""""

" Always hide the statusline
set laststatus=2

" Python BLACK.
"let g:black_fast = 1
"autocmd BufWritePre *.py if exists(':Black') == 2 | execute 'Black' | endif

func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc

autocmd BufWrite *.py :call DeleteTrailingWS()
autocmd BufWrite *.erl :call DeleteTrailingWS()
autocmd BufWrite *.ex :call DeleteTrailingWS()
autocmd BufWrite *.js :call DeleteTrailingWS()
autocmd BufWrite *.jsx :call DeleteTrailingWS()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Spell checking
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"Pressing ,ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>

""""""""""""""""""""""""""""""
" => Python section
""""""""""""""""""""""""""""""

let python_highlight_all = 1
au FileType python syn keyword pythonDecorator True None False self

au BufNewFile,BufRead *.jinja,*.sls setf jinja
au BufNewFile,BufRead *.mako set ft=mako

au! FileType python setl nosmartindent

""""""""""""""""""""""""""""""
" => JavaScript section
"""""""""""""""""""""""""""""""

au FileType javascript setl fen
au FileType javascript setl nocindent

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => MISC
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

map <leader>pp :setlocal paste!<cr>

let airline#parts#ffenc#skip_expected_string = 'utf-8[unix]'
let airline#extensions#tabline#formatter = 'unique_tail_improved'
let airline#extensions#tabline#overflow_marker = '…'
let airline#extensions#tabline#show_tab_type = 0
let airline#extensions#tabline#buffer_idx_mode = 1
let airline#extensions#tmuxline#enabled = 0
let airline_powerline_fonts = 1
let airline#extensions#tabline#enabled = 1
let airline_solarized_dark_text = 1
let airline_solarized_dark_inactive_border = 1
let airline_mode_map = {
  \ '__': '--',
  \ 'n': 'N',
  \ 'i': 'I',
  \ 'R': 'R',
  \ 'c': 'C',
  \ 'v': 'V',
  \ 'V': 'V-L',
  \ '': 'V-B',
  \ 's': 'S',
  \ 'S': 'S-L',
  \ '': 'S-B',
  \ 't': 'T',
  \ }

if !exists('g:airline_symbols')
  let airline_symbols = {}
endif

let airline_symbols.maxlinenr = ''

let g:airline_theme_patch_func = 'AirlineThemePatch'
function! AirlineThemePatch(palette)
  if g:airline_theme == 'solarized'
    let normal = a:palette.normal
    let insert = a:palette.insert
    let visual = a:palette.visual
    let lighter = normal.airline_b[1]
    let dimmer = normal.airline_c[0]
    let darker = normal.airline_c[1]
    let normal.airline_b[0] = darker
    let insert.airline_b[0] = darker
    let visual.airline_b[0] = darker
    let normal.airline_y[0] = darker
    let insert.airline_y[0] = darker
    let visual.airline_y[0] = darker
    let tabline = get(a:palette, 'tabline', {})
    let tabline.airline_tab = get(tabline, 'airline_tab', normal.airline_b[:])
    let tabline.airline_tab[0] = dimmer
    let tabline.airline_tab[1] = darker
    let tabline.airline_tabsel = get(tabline, 'airline_tabsel', normal.airline_a[:])
    let tabline.airline_tabsel[1] = lighter
    let tabline.airline_tabsel[4] = ''
    let tabline.airline_tabmod = get(tabline, 'airline_tabmod', insert.airline_a[:])
    let tabline.airline_tabmod[4] = ''
    let a:palette.tabline = tabline
  endif
endfunction

" Avoid E173 by visiting last buffer ASAP.
if argc() > 1
  silent blast
  silent bfirst
endif
