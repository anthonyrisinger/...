" Initialization.
set nocompatible
lang en_US.UTF-8
set encoding=utf-8
set timeoutlen=200
set ttimeoutlen=0
filetype on
filetype plugin on
filetype indent on

" Recursive maps to normalize Option + Left/Right/Delete and other keycodes.
" These friendly names are referenced by future bindings.
map  <Esc><BS> <M-BS>
map! <Esc><BS> <M-BS>
map  <Char-23> <M-BS>
map! <Char-23> <M-BS>
map  <Esc>[H <Home>
map! <Esc>[H <Home>
map  <Esc>[F <End>
map! <Esc>[F <End>
map  <Esc>b <M-b>
map! <Esc>b <M-b>
map  <Esc>f <M-f>
map! <Esc>f <M-f>
" Option + Left/Right/Delete.
noremap  <M-BS> db
noremap! <M-BS> <C-w>
noremap  <M-b> <S-Left>
noremap! <M-b> <S-Left>
noremap  <M-f> <S-Right>
noremap! <M-f> <S-Right>
" Command + Delete:
noremap <C-u> d^
" noremap Option + Up (\e[1;9A) and Option + Down (\e[1;9B):
noremap <ESC>[1;9A gUiw
noremap <ESC>[1;9B guiw
" Same thing under alternate screen:
noremap <ESC>[1;3A gUiw
noremap <ESC>[1;3B guiw
" Un/indent selected text.
vnoremap <Tab> >gv
vnoremap <S-Tab> <gv

let s:ellipsis = expand("~/.../self")
let s:e_cache = s:ellipsis . "/var/cache/vim"
let s:e_home = s:ellipsis . "/data/profile/vim"
let s:e_plugins = s:e_home . "/plugged"

let &runtimepath = s:e_home . "," . $VIMRUNTIME
let netrw_home = s:e_cache

" Specify a directory for plugins
call plug#begin(s:e_plugins)
Plug 'lifepillar/vim-solarized8'
Plug 'vito-c/jq.vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'sheerun/vim-polyglot'
Plug 'edkolev/promptline.vim'
Plug 'edkolev/tmuxline.vim'
call plug#end()
if empty(globpath(s:e_plugins, '*'))
  " Install plugins on first load.
  autocmd VimEnter * PlugInstall --sync | source ~/.vimrc
endif

" Sets how many lines of history VIM has to remember
set history=10000

" Set to auto read when a file is changed from the outside
set autoread

" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = ","

" Exit insert mode
imap jj <Esc>

" Fast saving
nmap <leader>w :w!<cr>

" Fast editing of the .vimrc
map <leader>e :e! ~/.vimrc<cr>

" Remove search highlights.
map <silent> <leader><cr> :let @/ = ''<cr>

" When vimrc is edited, reload it
autocmd! bufwritepost .vimrc source ~/.vimrc


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => VIM user interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set noshowmode
set scrolloff=6

set ruler                           " Always show current position

set cmdheight=1                     " The commandbar height

set backspace=eol,start,indent      " Set backspace config
"set whichwrap+=<,>,h,l
set whichwrap+=h,l

set ignorecase                      " Ignore case when searching
set smartcase

set hlsearch                        " Highlight search things

set incsearch       " Make search act like search in modern browsers
set nolazyredraw      " Don't redraw while executing macros

set magic           " Set magic on, for regular expressions

set showmatch       " Show matching bracets when text indicator is over them
set mat=2           " How many tenths of a second to blink

set noerrorbells    " No sound on errors
set novisualbell
set t_vb=

set nonu              " I *did* love me some line numbers


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Colors and Fonts
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
syntax enable " Enable syntax highlighting

" Set font according to system
set gfn=Monospace\ 10
set shell=/bin/bash

set background=dark
if has('termguicolors') && ($COLORTERM == 'truecolor' || &t_Co > 256)
  set termguicolors
  " Direct color in classic vim.
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
else
  " Fallback to reduced palette.
  let solarized_use16 = 1
endif
let solarized_termtrans = 1
silent! colorscheme solarized8
hi! IncSearch cterm=reverse ctermfg=3 ctermbg=none gui=reverse guifg=#d33682 guibg=none
hi! Search cterm=reverse ctermfg=5 ctermbg=none gui=reverse guifg=#6c71c4 guibg=none

set ffs=unix,dos,mac "Default file types

if exists("&colorcolumn")
    set colorcolumn=88
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Files, backups and undo
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Turn backup off, since most stuff is in SVN, git anyway...
set nobackup
set nowb
set noswapfile

"Persistent undo
try
    set undodir=~/.../self/var/cache/vim/undo
    set undofile
catch
endtry


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set tabstop=2 shiftwidth=2 softtabstop=0 expandtab smarttab

" Erlang
autocmd BufEnter *.erl :set tabstop=2 shiftwidth=2
autocmd BufEnter *.hrl :set tabstop=2 shiftwidth=2
autocmd BufEnter sys.config :set tabstop=2 shiftwidth=2 filetype=erlang
autocmd BufEnter rebar.config :set tabstop=2 shiftwidth=2 filetype=erlang

set lbr
set textwidth=88

set ai "Auto indent
set si "Smart indet
set wrap "Wrap lines

autocmd BufEnter *.go :set noexpandtab
autocmd BufEnter wscript :set noexpandtab filetype=python
autocmd BufEnter *.djhtml :set filetype=htmldjango
autocmd BufEnter */git*config :set filetype=gitconfig
autocmd BufEnter */tmux*conf :set filetype=tmux

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Moving around, tabs and buffers
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Return to last edit position (You want this!) *N*
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif

"Remeber open buffers on close
set viminfo=%,'100,s1024,h

""""""""""""""""""""""""""""""
" => Statusline
""""""""""""""""""""""""""""""

" Always hide the statusline
set laststatus=2

"Delete trailing white space, useful for Python ;)
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc

autocmd BufWrite *.py :call DeleteTrailingWS()
autocmd BufWrite *.erl :call DeleteTrailingWS()
autocmd BufWrite *.ex :call DeleteTrailingWS()
autocmd BufWrite *.js :call DeleteTrailingWS()
autocmd BufWrite *.jsx :call DeleteTrailingWS()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Spell checking
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"Pressing ,ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>

""""""""""""""""""""""""""""""
" => Python section
""""""""""""""""""""""""""""""

let python_highlight_all = 1
au FileType python syn keyword pythonDecorator True None False self

au BufNewFile,BufRead *.jinja setf htmljinja
au BufNewFile,BufRead *.mako set ft=mako

au! FileType python setl nosmartindent

""""""""""""""""""""""""""""""
" => JavaScript section
"""""""""""""""""""""""""""""""

au FileType javascript setl fen
au FileType javascript setl nocindent

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => MISC
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

map <leader>pp :setlocal paste!<cr>

let airline#parts#ffenc#skip_expected_string = 'utf-8[unix]'
let airline#extensions#tabline#formatter = 'unique_tail_improved'
let airline#extensions#tabline#overflow_marker = 'â€¦'
let airline#extensions#tabline#show_tab_type = 0
let airline#extensions#tabline#buffer_idx_mode = 1
let airline#extensions#tmuxline#enabled = 0
let airline_powerline_fonts = 1
let airline#extensions#tabline#enabled = 1
let airline_solarized_dark_text = 1
let airline_solarized_dark_inactive_border = 1
let airline_mode_map = {
  \ '__': '--',
  \ 'n': 'N',
  \ 'i': 'I',
  \ 'R': 'R',
  \ 'c': 'C',
  \ 'v': 'V',
  \ 'V': 'V-L',
  \ '': 'V-B',
  \ 's': 'S',
  \ 'S': 'S-L',
  \ '': 'S-B',
  \ 't': 'T',
  \ }

if !exists('g:airline_symbols')
  let airline_symbols = {}
endif

let airline_symbols.maxlinenr = ''

let g:airline_theme_patch_func = 'AirlineThemePatch'
function! AirlineThemePatch(palette)
  if g:airline_theme == 'solarized'
    let normal = a:palette.normal
    let insert = a:palette.insert
    let visual = a:palette.visual
    let lighter = normal.airline_b[1]
    let dimmer = normal.airline_c[0]
    let darker = normal.airline_c[1]
    let normal.airline_b[0] = darker
    let insert.airline_b[0] = darker
    let visual.airline_b[0] = darker
    let normal.airline_y[0] = darker
    let insert.airline_y[0] = darker
    let visual.airline_y[0] = darker
    let tabline = get(a:palette, 'tabline', {})
    let tabline.airline_tab = get(tabline, 'airline_tab', normal.airline_b[:])
    let tabline.airline_tab[0] = dimmer
    let tabline.airline_tab[1] = darker
    let tabline.airline_tabsel = get(tabline, 'airline_tabsel', normal.airline_a[:])
    let tabline.airline_tabsel[1] = lighter
    let tabline.airline_tabsel[4] = ''
    let tabline.airline_tabmod = get(tabline, 'airline_tabmod', insert.airline_a[:])
    let tabline.airline_tabmod[4] = ''
    let a:palette.tabline = tabline
  endif
endfunction
