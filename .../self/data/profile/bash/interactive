#!/bin/bash


# I'm human, thanks
if [[ $(date +%Z) == 'UTC' ]]; then
    export TZ='America/Chicago'
fi

# because en_US.utf8 sorting is... dumb
export LC_COLLATE=C

export TERM="${TERM:-dumb}"
export EDITOR='vim'
export PROMPT_DIRTRIM=3

export VIRTUAL_ENV_DISABLE_PROMPT=true

[[ ${TERM} == dumb ]] &&
    return 0

# Better shell scripting experience:
#   - Word split on newline ONLY.
#   - Disable pathname expansion for unquoted words.
#   - Patterns may expand to zero words.
#   - Patterns may use extended matching @(...) operators.
# With respect to completion routines, `extglob` is already enabled. Sadly, all
# the others interfere with widespread shell conventions and scripts.
#IFS=$'\n'
#set -f
#shopt -s nullglob
shopt -s extglob

: ${DEVELOPER_DIR:=$(xcode-select --print-path 2> /dev/null)}
for x in \
  /usr{,/local}/share/bash-completion/bash_completion \
  {,/usr/local}/etc/bash_completion \
  ${ELLIPSIS}data/profile/bash/completion.d/* \
  {,$DEVELOPER_DIR}/usr/share/git{,-core}/git-{prompt.sh,completion.bash} \
;
do
    [[ -r ${x} ]] &&
        . ${x}
done
# Rename _expand to _orig_expand.
eval _orig"$(declare -f _expand)"
# Never expand ~ during TAB completion.
_expand () { [[ "$cur" == \~*/* ]] || _orig_expand; }

_ps1 () { (

    c () {
      # Expands 0xffffff to 16777215.
      declare -i i=$1
      case $1 in
        (black)   i=0;;
        (red)     i=1;;
        (green)   i=2;;
        (yellow)  i=3;;
        (blue)    i=4;;
        (magenta) i=5;;
        (cyan)    i=6;;
        (white)   i=7;;
      esac
      echo -n $i
    }

    e () {
      printf '\['
      while ((${#*})); do
        case $1 in
          (none) tput op; tput sgr0;;
          (fg,*) tput setaf $(c ${1#fg,});;
          (bg,*) tput setab $(c ${1#bg,});;
          (*) tput $1;;
        esac
        shift
      done
      printf '\]'
    }

    local u="$(e none fg,yellow)\h"
    local w="$(e none)"
    local v="${w}\${VIRTUAL_ENV:+\"$(e none fg,magenta)\${VIRTUAL_ENV//@(*\/|.venv)} ${w}\"}"

    if [[ ${EUID} == 0 ]]; then
        local m="$(e none fg,red)▶"
    else
        local m="$(e none)▶"
    fi

    local s=( )

    [[ ${HOSTNAME} =~ ^ca- ]] &&
        s+=("$(e fg,green)★") ||
        s+=("$(e fg,red)⚑")

    [[ ${SSH_CONNECTION} =~ [0-9.]+ ]] &&
        s+=("$(e fg,blue)⇅")

    ((${#s})) &&
        s=" ${s[*]} "

    local q='2>/dev/null'

    echo -e "\
${w}  ⎞ ${w}\D{%l:%M%P} ${v}$(e none)${u}${s}
${w}  ⎥  \$(__git_ps1 '$(e none fg,yellow)%s ' ${q})${w}\w
${w}  ⎥${m} $(e none)"

) }

# Bash won't get SIGWINCH if another process is in the foreground.
# Enable checkwinsize so that bash will check the terminal size when
# it regains control.
# http://cnswww.cns.cwru.edu/~chet/bash/FAQ (E11)
shopt -s checkwinsize

# Enable history appending instead of overwriting.
shopt -s histappend

# Collapse multiple lines to one.
shopt -s cmdhist

# Change the window title of X terminals
case ${TERM} in
  [ixatE]term*|rxvt*|gnome*|interix)
    PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME%%.*}:${PWD/$HOME/~}\007"'
    ;;
  tmux|screen)
    PROMPT_COMMAND='echo -ne "\033_${USER}@${HOSTNAME%%.*}:${PWD/$HOME/~}\033\\"'
    ;;
esac

# flush HISTFILE constantly
PROMPT_COMMAND+='
history -a
'

# auto-update SSH_AUTH_SOCK within running shells
PROMPT_COMMAND+='
if [[ -n ${TMUX} && -n ${SSH_AUTH_SOCK} ]]; then
    unset SSH_AUTH_SOCK
    export $(tmux show-environment | grep ^SSH_AUTH_SOCK)
fi
'

use_color=false

# Set colorful PS1 only on colorful terminals.
# dircolors --print-database uses its own built-in database
# instead of using /etc/DIR_COLORS.  Try to use the external file
# first to take advantage of user additions.  Use internal bash
# globbing instead of external grep binary.
safe_term=${TERM//[^[:alnum:]]/?}   # sanitize TERM
match_lhs=""
[[ -f ~/.dir_colors   ]] && match_lhs="${match_lhs}$(<~/.dir_colors)"
[[ -f /etc/DIR_COLORS ]] && match_lhs="${match_lhs}$(</etc/DIR_COLORS)"
[[ -z ${match_lhs}    ]] \
  && type -P dircolors >/dev/null \
  && match_lhs=$(dircolors --print-database)
[[ $'\n'${match_lhs} == *$'\n'"TERM "${safe_term}* ]] && use_color=true

if ${use_color} ; then
  # Enable colors for ls, etc.  Prefer ~/.dir_colors #64489
  if type -P dircolors >/dev/null ; then
    if [[ -f ~/.dir_colors ]] ; then
      eval $(dircolors -b ~/.dir_colors)
    elif [[ -f /etc/DIR_COLORS ]] ; then
      eval $(dircolors -b /etc/DIR_COLORS)
    fi
  fi
    PS1=$(_ps1)
    ls --color=auto >/dev/null 2>&1 && _gnu_ls=true || _gnu_ls=false
    if ${_gnu_ls}; then
      alias ls='ls -F --color=auto'
    else
      alias ls='ls -F -G'
    fi
else
  if [[ ${EUID} == 0 ]] ; then
    # show root@ when we don't have colors
    PS1='\u@\h \W \$ '
  else
    PS1='\u@\h \w \$ '
  fi
fi


HISTCONTROL=ignoreboth:erasedups
HISTFILE=${ELLIPSIS}var/cache/bash/history
HISTFILESIZE=10000000
HISTIGNORE='[bf]g:[bf]g :exit:exit :cognito:cognito :incognito:incognito '
HISTSIZE=10000000
HISTTIMEFORMAT='%a %b %-d %-I:%M:%S %p  # '


[[ -r ${ELLIPSIS}data/profile/bash/aliases ]] &&
    . ${ELLIPSIS}data/profile/bash/aliases
